{"version":3,"sources":["components/Courses.js","components/CourseDetail.js","components/Header.js","components/Form.js","components/UserSignIn.js","components/UserSignUp.js","components/CreateCourse.js","components/UpdateCourse.js","components/UserSignOut.js","config.js","Data.js","Context.js","PrivateRoute.js","components/NotFound.js","components/Forbidden.js","components/UnhandledError.js","App.js","reportWebVitals.js","index.js"],"names":["Courses","state","courses","axios","get","then","response","setState","data","catch","err","console","log","props","history","push","className","this","map","course","to","id","href","title","version","xmlns","x","y","viewBox","points","Component","CourseDetail","user","errors","delete","context","authUser","authenticatedUser","deleteCourse","emailAddress","password","length","match","params","userId","onClick","firstName","lastName","description","estimatedTime","materialsNeeded","Header","ErrorsDisplay","errorsDisplay","error","i","Form","cancel","submit","submitButtonText","elements","onSubmit","event","preventDefault","type","UserSignIn","change","name","target","value","from","location","pathname","actions","signIn","onChange","placeholder","UserSignUp","confirmPassword","createUser","CreateCourse","createCourse","htmlFor","UpdateCourse","updateCourse","a","getCourse","UserSignOut","useEffect","signOut","config","apiBaseUrl","Data","path","method","body","requiresAuth","credentials","url","options","headers","JSON","stringify","encodedCredentials","btoa","fetch","api","status","json","Error","Context","React","createContext","Provider","Cookies","getJSON","getUser","set","expires","remove","children","Consumer","withContext","PrivateRoute","component","rest","render","NotFound","Forbidden","UnhandledError","UserSignUpWithContext","UserSignInWithContext","HeaderWithContext","UserSignOutWithContext","CreateCourseWithContext","CoursesWithContext","CourseDetailWithContext","UpdateCourseWithContext","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ffeb4126.chunk.js","sourcesContent":["// Import statements\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class Courses extends Component {\r\n    // Create the state that will set the data according to the API response\r\n    state = {\r\n        courses: []\r\n    };\r\n    \r\n    // Mounting data from the API to state\r\n    componentDidMount() {\r\n        axios.get('http://localhost:5000/api/courses').then(response => {\r\n            this.setState({\r\n                courses: response.data\r\n            });\r\n        })\r\n        // If the request is unsuccessful redirect the user to \"error\" page\r\n        .catch(err => {\r\n            console.log('Error fetching and parsing data', err);\r\n            this.props.history.push('/error')\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>                \r\n                <main>\r\n                    <div className=\"wrap main--grid\">\r\n\r\n                    {/** Iterates over each course to then render it */}\r\n                    {this.state.courses.map(course => (\r\n                        <Link to={`/courses/${course.id}`} key={course.id} className=\"course--module course--link\" href=\"course-detail.html\">\r\n                            <h2 className=\"course--label\">Course</h2>\r\n                            <h3 className=\"course--title\">{course.title}</h3>\r\n                        </Link>\r\n                    ))}\r\n                    \r\n                        <Link to={`/courses/create`} className=\"course--module course--add--module\" href=\"create-course.html\">\r\n                            <span className=\"course--add--title\">\r\n                                <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\r\n                                viewBox=\"0 0 13 13\" className=\"add\"><polygon points=\"7,6 7,0 6,0 6,6 0,6 0,7 6,7 6,13 7,13 7,7 13,7 13,6 \"></polygon></svg>\r\n                                New Course\r\n                            </span>\r\n                        </Link>\r\n                    </div>\r\n                </main>\r\n            </>\r\n        );\r\n    };\r\n};","// Import statements\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport default class CourseDetail extends Component {\r\n\r\n    // Create the state to then set the data\r\n    state = {\r\n        course: [],\r\n        user: [],\r\n        errors: []\r\n    };\r\n    \r\n    // Mounting data from the API to state\r\n    componentDidMount() {\r\n        axios.get(`http://localhost:5000/api/courses/${this.props.match.params.id}`).then(response => {\r\n            this.setState({\r\n                course: response.data,\r\n                user: response.data.user\r\n            });\r\n        })\r\n        // If the request is unsuccessful and the user is authenticated redirect them to \"notfound\" page\r\n        .catch(err => {\r\n            if (this.props.context.authenticatedUser) {\r\n                console.log('Error fetching and parsing data', err);\r\n                this.props.history.push('/notfound')\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        // Destructuring context from props\r\n        const { context } = this.props\r\n\r\n        return (\r\n            <>\r\n                <main>\r\n                    <div className=\"actions--bar\">\r\n                        <div className=\"wrap\">\r\n                         {/** If the user is authenticated and the userId match with courseId, render \"Delete\" and \"Update\" buttons */}\r\n                            {\r\n                                context.authenticatedUser ? (\r\n                                    \r\n                                    context.authenticatedUser.userId === this.state.user.id && (\r\n                                        <>\r\n                                            <Link to={`/courses/${this.props.match.params.id}/update`} className=\"button\" href=\"update-course.html\">Update Course</Link>\r\n                                            <button className=\"button\" href=\"#\" onClick={() => this.delete()}>Delete Course</button>\r\n                                        </>\r\n                                    )  \r\n                                        \r\n                                ) : <></>\r\n                            }\r\n\r\n                         {/** If the user is not authenticated just render the \"Return to List\" button */}\r\n                            <Link to={'/'} className=\"button button-secondary\" href=\"index.html\">Return to List</Link>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"wrap\">\r\n                        <h2>Course Detail</h2>\r\n                        <form>\r\n                            <div className=\"main--flex\">\r\n                                <div>\r\n                                    <h3 className=\"course--detail--title\">Course</h3>\r\n                                    <h4 className=\"course--name\">{this.state.course.title}</h4>\r\n                                    <p>{`${this.state.user.firstName} ${this.state.user.lastName}`}</p>\r\n\r\n                                    <ReactMarkdown>{`${this.state.course.description}`}</ReactMarkdown>\r\n                                </div>\r\n                                \r\n                                <div>\r\n                                    <h3 className=\"course--detail--title\">Estimated Time</h3>\r\n                                    <p>{this.state.course.estimatedTime}</p>\r\n\r\n                                    <h3 className=\"course--detail--title\">Materials Needed</h3>\r\n                                    <ul className=\"course--detail--list\">\r\n                                        <ReactMarkdown>{this.state.course.materialsNeeded}</ReactMarkdown>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </main>\r\n            </>\r\n        );\r\n    };\r\n\r\n    // Method that delete a course from the list\r\n    delete = () => {\r\n\r\n        // Destructuring context and authenticatedUser\r\n        const { context } = this.props;\r\n        const authUser = context.authenticatedUser;\r\n\r\n        const id = this.state.course.id\r\n\r\n        // Generates a \"DELETE\" request to the API that deletes a course if success\r\n        context.data.deleteCourse(authUser.emailAddress, authUser.password, id)\r\n            .then(errors => {\r\n                if (errors.length) {\r\n                    this.setState({ errors });\r\n                }\r\n                // If the request is success redirect the user to main page\r\n                else {\r\n                    this.props.history.push('/');\r\n                }\r\n            })\r\n            // If the request is unsuccess redirect the user to error page\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.history.push('/error')\r\n            });\r\n    };\r\n};\r\n","// Import statements\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        // Destructuring context\r\n        const { context } = this.props;\r\n        const authUser = context.authenticatedUser;\r\n\r\n        return(\r\n            <header>\r\n                <div className=\"wrap header--flex\">\r\n                    <h1 className=\"header--logo\"><Link to={'/'} href=\"index.html\">Courses</Link></h1>\r\n                    <nav>\r\n                        {/** If user is sign in switch the header */}\r\n                        {   \r\n                            authUser ?\r\n                            <>\r\n                                <span className=\"header--signedin\">Welcome, {authUser.firstName}</span>\r\n                                <Link to=\"/signout\"> Sign Out</Link>\r\n                            </>\r\n                        :\r\n                            <>\r\n\r\n                                <Link to=\"/signup\">Sign Up </Link>\r\n                                <Link to=\"/signin\">Sign In </Link>\r\n\r\n                            </>\r\n                        }\r\n                    </nav>\r\n                </div>\r\n            </header>\r\n        );\r\n    };\r\n};","// Import statements\r\nimport React from 'react';\r\n\r\n// Stateless Component that generates a Form\r\nconst Form = (props) => {\r\n\r\n  // Destructuring props\r\n  const { cancel, errors, submit, submitButtonText, elements, } = props;\r\n\r\n  // Function that submit the form\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    submit();\r\n  }\r\n\r\n  // Function that cancel and redirect user to main page\r\n  function handleCancel(event) {\r\n    event.preventDefault();\r\n    cancel();\r\n  }\r\n\r\n  return (\r\n    <>\r\n        <ErrorsDisplay errors={errors} />\r\n        <form onSubmit={handleSubmit}>\r\n            {elements()}\r\n            <button className=\"button\" type=\"submit\">{submitButtonText}</button>\r\n            <button className=\"button button-secondary\" onClick={handleCancel}>Cancel</button>\r\n        </form>\r\n    </>\r\n  );\r\n};\r\n\r\n// Stateless Component that render each error from the API response\r\nexport function ErrorsDisplay({ errors }) {\r\n  let errorsDisplay = null;\r\n\r\n  if (errors.length) {\r\n    errorsDisplay = (\r\n      <div>\r\n        <div className=\"validation-errors\">\r\n          <h3>Validation Errors</h3>\r\n          <ul>\r\n            {errors.map((error, i) => <li key={i}>{error}</li>)}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return errorsDisplay;\r\n};\r\n\r\nexport default Form;\r\n","// Import statements\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Form from './Form';\r\n\r\nexport default class UserSignIn extends Component {\r\n\r\n  // Create state to sync with user inputs\r\n  state = {\r\n    emailAddress: '',\r\n    password: '',\r\n    errors: [],\r\n  };\r\n\r\n  render() {\r\n    // Destructuring state\r\n    const { emailAddress, password, errors, } = this.state;\r\n\r\n    return (\r\n      <div className=\"form--centered\">\r\n        <h1>Sign In</h1>\r\n\r\n        <Form  cancel={this.cancel} errors={errors} submit={this.submit} submitButtonText=\"Sign In\"\r\n          elements={() => (\r\n            <>\r\n                <input id=\"emailAddress\" name=\"emailAddress\" type=\"text\" value={emailAddress} onChange={this.change} placeholder=\"Email Address\" />\r\n                <input id=\"password\" name=\"password\" type=\"password\" value={password} onChange={this.change} placeholder=\"Password\" />                \r\n            </>\r\n          )} >\r\n        </Form>\r\n\r\n        <p>\r\n            Don't have a user account? Click here to<Link to=\"/signup\"> sign up</Link>\r\n        </p>    \r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Method that sync state with user inputs\r\n  change = (event) => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    this.setState(() => {\r\n      return {\r\n        [name]: value\r\n      };\r\n    });\r\n  };\r\n\r\n  // Method that generates a \"GET\" request with basic auth parameters\r\n  submit = () => {\r\n\r\n    // Destructuring context and state\r\n    const { context } = this.props;\r\n    const { from } = this.props.location.state || { from: { pathname: '/' } };\r\n    const { emailAddress, password } = this.state;\r\n\r\n    // Generates \"GET\" request\r\n    context.actions.signIn(emailAddress, password)\r\n      .then( user => {\r\n        if (user === null) {\r\n          this.setState(() => {\r\n            return { errors: [ 'Sign-in was unsuccessful' ]}\r\n          })\r\n        } \r\n        // If request is successful redirect user to main page\r\n        else {\r\n          this.props.history.push(from);\r\n        }\r\n      })\r\n      // If request is unsuccessful redirect user to \"/error\" page\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.props.history.push('/error');\r\n      })\r\n  }; \r\n\r\n  // Method that redirect user to main page\r\n  cancel = () => {\r\n    this.props.history.push('/');\r\n  };\r\n};\r\n","// Import statements\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Form from './Form';\r\n\r\nexport default class UserSignUp extends Component {\r\n  \r\n  // Create state that sync with user inputs\r\n  state = {\r\n    firstName: '',\r\n    lastName: '',\r\n    emailAddress: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    errors: [],\r\n  }\r\n\r\n  render() {\r\n\r\n    // Destructuring state\r\n    const { firstName, lastName, emailAddress, password, confirmPassword, errors, } = this.state;\r\n\r\n    return (\r\n        <div className=\"form--centered\">\r\n          <h1>Sign Up</h1>\r\n\r\n          <Form  cancel={this.cancel} errors={errors} submit={this.submit} submitButtonText=\"Sign Up\"\r\n            elements={() => (\r\n              <>\r\n                <input id=\"firstName\" name=\"firstName\" type=\"text\" value={firstName} onChange={this.change} placeholder=\"Name\" />\r\n                <input id=\"lastName\" name=\"lastName\" type=\"text\" value={lastName} onChange={this.change} placeholder=\"Last Name\" />\r\n                <input id=\"emailAddress\" name=\"emailAddress\" type=\"email\" value={emailAddress} onChange={this.change} placeholder=\"Email Address\" />\r\n                <input id=\"password\" name=\"password\" type=\"password\" value={password} onChange={this.change} placeholder=\"Password\" />\r\n                <input  id=\"confirmPassword\" name=\"confirmPassword\" type=\"password\" value={confirmPassword} onChange={this.change} placeholder=\"Confirm Password\" />\r\n              </>\r\n            )} >\r\n          </Form>\r\n          \r\n          <p>\r\n              Already have a user account? Click here to <Link to=\"/signin\">sign in!</Link>\r\n          </p>\r\n        </div>\r\n    );\r\n  };\r\n\r\n  // Method that sync state with user inputs\r\n  change = (event) => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    this.setState(() => {\r\n      return {\r\n        [name]: value\r\n      };\r\n    });\r\n  };\r\n\r\n  // Method that generates a \"POST\" request and if success creates a new user\r\n  submit = () => {\r\n\r\n    // Destructuring context\r\n    const { context } = this.props;\r\n\r\n    // Destructuring state\r\n    const { firstName, lastName, emailAddress, password, confirmPassword } = this.state;\r\n    const user = { firstName, lastName, emailAddress, password, confirmPassword };\r\n\r\n    // Generates \"POST\" request\r\n    context.data.createUser(user)\r\n      .then(errors => {\r\n        if (errors.length) {\r\n          this.setState({ errors });\r\n        } \r\n        // If request is successful sign in the user and redirect them to main page\r\n        else {\r\n          context.actions.signIn(emailAddress, password)\r\n            .then(() => {\r\n              this.props.history.push('/');\r\n            })\r\n        }\r\n      })\r\n      // If request is unsuccessful redirect user to \"/error\" page\r\n      .catch( err => {\r\n        console.log(err);\r\n        this.props.history.push('/error'); \r\n      })\r\n  };\r\n\r\n  // Method that redirect user to main page\r\n  cancel = () => {\r\n    this.props.history.push('/');\r\n  };\r\n};\r\n","// Import components\r\nimport React, { Component } from 'react';\r\nimport Form from './Form'\r\n\r\nexport default class CreateCourse extends Component {\r\n\r\n    // Create state for receive the inputs value of the form\r\n    state = {\r\n        title: '',\r\n        description: '',\r\n        estimatedTime: '',\r\n        materialsNeeded: '',\r\n        errors: []\r\n    };\r\n\r\n    render () {\r\n        // Destructuring context and state\r\n        const { context } = this.props;\r\n        const authUser = context.authenticatedUser;\r\n        const { title, description, estimatedTime, materialsNeeded, errors } = this.state\r\n    \r\n        return (\r\n            <>\r\n                <main>\r\n                    <div className=\"wrap\">\r\n                        <h2>Create Course</h2>\r\n\r\n                        {/** Form component that generates the form with render props */}\r\n                        <Form cancel={this.cancel} errors={errors} submit={this.submit} submitButtonText=\"Create Course\" \r\n                            elements={() => (\r\n                                <div className=\"main--flex\">\r\n                                    <div>\r\n                                        <label htmlFor=\"courseTitle\">Course Title</label>\r\n                                        <input id=\"title\" name=\"title\" type=\"text\" value={title} onChange={this.change} />\r\n\r\n                                        <p>{authUser.firstName} {authUser.lastName}</p>\r\n\r\n                                        <label htmlFor=\"courseDescription\">Course Description</label>\r\n                                        <textarea id=\"description\" name=\"description\" type=\"text\" onChange={this.change} value={description} />\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label htmlFor=\"estimatedTime\">Estimated Time</label>\r\n                                        <input id=\"estimatedTime\" name=\"estimatedTime\" type=\"text\" value={estimatedTime} onChange={this.change} />\r\n\r\n                                        <label htmlFor=\"materialsNeeded\">Materials Needed</label>\r\n                                        <textarea id=\"materialsNeeded\" name=\"materialsNeeded\" type=\"text\" onChange={this.change} value={materialsNeeded} />\r\n                                    </div>\r\n                                </div>\r\n                            )}>\r\n                        </Form>\r\n                        \r\n                    </div>\r\n                </main>\r\n            </>\r\n        );\r\n    };\r\n\r\n    // Method that set the inputs into state\r\n    change = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n    \r\n        this.setState(() => {\r\n          return {\r\n            [name]: value\r\n          };\r\n        });\r\n    };\r\n    \r\n    // Method that generates a \"POST\" request to create the new course\r\n    submit = () => {\r\n\r\n        // Destructuring Context\r\n        const { context } = this.props;\r\n        const authUser = context.authenticatedUser;\r\n        const userId = authUser.userId;\r\n\r\n        // Destructuring State\r\n        const { title, description, estimatedTime, materialsNeeded } = this.state;\r\n        const course = { title, description, estimatedTime, materialsNeeded, userId };\r\n\r\n        // Generates \"POST\" request\r\n        context.data.createCourse(course, authUser.emailAddress, authUser.password)\r\n            .then(errors => {\r\n            if (errors.length) {\r\n                this.setState({ errors });\r\n            } \r\n            // If request is success redirect user to main page\r\n            else {\r\n                this.props.history.push('/');\r\n            }})\r\n            // If request is unsuccess redirect user to error page\r\n            .catch( err => {\r\n            console.log(err);\r\n            this.props.history.push('/error'); // push to history stack\r\n        });\r\n    };\r\n    \r\n    // Method that redirect user to main page\r\n    cancel = () => {\r\n        this.props.history.push('/');\r\n    };\r\n};","// Import statements\r\nimport React, { Component } from 'react';\r\nimport Form from './Form';\r\n\r\nexport default class UpdateCourse extends Component {\r\n\r\n    // Create state to manage API response\r\n    state = {\r\n        user: {},\r\n        title: '',\r\n        description: '',\r\n        estimatedTime: '',\r\n        materialsNeeded: '',\r\n        errors: []\r\n    };\r\n    \r\n    // Mount state if the request is success\r\n    async componentDidMount() {\r\n        const id = this.props.match.params.id\r\n        const authUser = this.props.context.authenticatedUser\r\n        \r\n        // Generates a \"GET\" request to the course\r\n        await this.props.context.data.getCourse(id).then(response => {\r\n            this.setState({\r\n                user: response.user,\r\n                title: response.title,\r\n                description: response.description,\r\n                estimatedTime: response.estimatedTime,\r\n                materialsNeeded: response.materialsNeeded\r\n            });\r\n\r\n            // If authenticated user id and course id doesn't match, redirect user to \"/forbidden\" page\r\n            if (authUser.userId !== response.user.id) {\r\n                this.props.history.push('/forbidden')\r\n            };\r\n        })\r\n        // If the request is unsuccessful, redirect user to \"/notfound\" page\r\n        .catch(err => {\r\n            console.log('Error fetching and parsing data', err);\r\n            this.props.history.push('/notfound')\r\n        });\r\n    };\r\n\r\n    render() {\r\n        // Destructuring context and state\r\n        const { user } = this.state\r\n        const { title, description, estimatedTime, materialsNeeded, errors } = this.state\r\n\r\n        return (\r\n            <>\r\n                <main>\r\n                    <div className=\"wrap\">\r\n                        <h2>Update Course</h2>\r\n\r\n                        <Form cancel={this.cancel} errors={errors} submit={this.submit} submitButtonText=\"Update Course\" \r\n                            elements={() => (\r\n                                <div className=\"main--flex\">\r\n                                    <div>\r\n                                        <label htmlFor=\"courseTitle\">Course Title</label>\r\n                                        <input id=\"title\" name=\"title\" type=\"text\" value={title} onChange={this.change} />\r\n\r\n                                        <p>{user.firstName} {user.lastName}</p>\r\n\r\n                                        <label htmlFor=\"courseDescription\">Course Description</label>\r\n                                        <textarea id=\"description\" name=\"description\" value={description} onChange={this.change}></textarea>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label htmlFor=\"estimatedTime\">Estimated Time</label>\r\n                                        <input id=\"estimatedTime\" name=\"estimatedTime\" type=\"text\" value={estimatedTime} onChange={this.change} />\r\n\r\n                                        <label htmlFor=\"materialsNeeded\">Materials Needed</label>\r\n                                        <textarea id=\"materialsNeeded\" name=\"materialsNeeded\" value={materialsNeeded} onChange={this.change}></textarea>\r\n                                    </div>\r\n                                </div>\r\n                            )}>\r\n                        </Form> \r\n\r\n                    </div>\r\n                </main>   \r\n            </>\r\n        );\r\n    };\r\n\r\n    // Method that sync inputs with state\r\n    change = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n    \r\n        this.setState(() => {\r\n          return {\r\n            [name]: value\r\n          };\r\n        });\r\n    };\r\n\r\n    // Method that generates a \"PUT\" request and update the course\r\n    submit = () => {\r\n\r\n        // Destructuring context\r\n        const { context } = this.props;\r\n        const authUser = context.authenticatedUser;\r\n        const userId = authUser.userId;\r\n\r\n        // Destructuring course id\r\n        const { match } = this.props\r\n        const id = match.params.id\r\n\r\n        // Destructuring state\r\n        const { title, description, estimatedTime, materialsNeeded } = this.state;\r\n        const course = { title, description, estimatedTime, materialsNeeded, userId };\r\n\r\n        // Generates \"PUT\" request to the API and update course if success\r\n        context.data.updateCourse(course, authUser.emailAddress, authUser.password, id)\r\n            .then(errors => {\r\n            if (errors.length) {\r\n                this.setState({ errors });\r\n            } \r\n            // If request is success, redirect user to update course page\r\n            else {\r\n                this.props.history.push(`/courses/${id}`);\r\n            }})\r\n            // If request is unsuccess, redirect user to \"/error\" page\r\n            .catch( err => {\r\n            console.log(err);\r\n            this.props.history.push('/error');\r\n        });\r\n    };\r\n    \r\n    // Method that redirect user to main page\r\n    cancel = () => {\r\n        const id = this.props.match.params.id\r\n\r\n        this.props.history.push(`/courses/${id}`);\r\n    };\r\n};","// Import statements\r\nimport React, { useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n// Stateless component that clean the cookie and redirect user to main page\r\nconst UserSignOut = ({ context }) => {\r\n    useEffect(() => context.actions.signOut())\r\n\r\n    return(\r\n        <Redirect to=\"/\" />\r\n    );\r\n};\r\n\r\nexport default UserSignOut;","// API route\nconst config = {\n  apiBaseUrl: 'http://localhost:5000/api',\n};\n\nexport default config;","// Import statements\r\nimport config from './config';\r\n\r\nexport default class Data {\r\n  // Method that let us manage our API request with specific options\r\n  api(path, method = 'GET', body = null, requiresAuth = false, credentials = null) {\r\n\r\n    // The config.apiBaseUrl is equivalent to http://localhost:5000/api\r\n    const url = config.apiBaseUrl + path;\r\n    \r\n    // Headers of our request\r\n    const options = {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n      },\r\n    };\r\n\r\n    // If the request has body value convert it to json\r\n    if (body !== null) {\r\n      options.body = JSON.stringify(body);\r\n    }\r\n\r\n    // If the request requires authorization encrypt the credentials\r\n    if (requiresAuth) {\r\n      const encodedCredentials = btoa(`${credentials.emailAddress}:${credentials.password}`)\r\n\r\n      options.headers['Authorization'] = `Basic ${encodedCredentials} `;\r\n    }\r\n\r\n    return fetch(url, options);\r\n  };\r\n\r\n  // Method that generates a GET request to the API\r\n  async getUser(emailAddress, password) {\r\n    const response = await this.api(`/users`, 'GET', null, true, { emailAddress, password });\r\n    // If the response is successful return the user data\r\n    if (response.status === 200) {\r\n      return response.json().then(data => data);\r\n    }\r\n\r\n    // If the response is unsuccessful return an unauthorized response\r\n    else if (response.status === 401) {\r\n      return null;\r\n    }\r\n\r\n    else {\r\n      throw new Error();\r\n    };\r\n  };\r\n\r\n  // Method that generates a GET request to the API\r\n  async getCourse(course) {\r\n    const response = await this.api(`/courses/${course}`);\r\n    // If the response is successful return the user data\r\n    if (response.status === 200) {\r\n      return response.json().then(data => data);\r\n    }\r\n\r\n    // If the response is unsuccessful return an unauthorized response\r\n    else if (response.status === 401) {\r\n      return null;\r\n    }\r\n\r\n    else {\r\n      throw new Error();\r\n    };\r\n  };\r\n  \r\n  // Method that generates a POST request to create a new user\r\n  async createUser(user) {\r\n    const response = await this.api('/users', 'POST', user);\r\n\r\n    // If the response is successful create the new user\r\n    if (response.status === 201) {\r\n      return [];\r\n    }\r\n\r\n    // If the response is unsuccessful return a bad request response\r\n    else if (response.status === 400) {\r\n      return response.json().then(data => {\r\n        return data.errors;\r\n      });\r\n    }\r\n\r\n    else {\r\n      throw new Error();\r\n    };\r\n  };\r\n\r\n  // Method that generates a POST request to create a new course\r\n  async createCourse(course, emailAddress, password) {\r\n    const response = await this.api('/courses', 'POST', course, true, { emailAddress, password });\r\n\r\n    // If the response is successful create a new course\r\n    if (response.status === 201) {\r\n      return [];\r\n    }\r\n\r\n    // If the response is unsuccessful return a bad request response\r\n    else if (response.status === 400) {\r\n      return response.json().then(data => {\r\n        return data.errors;\r\n      });\r\n    }\r\n\r\n    else {\r\n      throw new Error();\r\n    };\r\n  };\r\n\r\n  // Method that generates a PUT request to update a course\r\n  async updateCourse(course, emailAddress, password, id) {\r\n    const response = await this.api(`/courses/${id}`, 'PUT', course, true, { emailAddress, password });\r\n\r\n    // If the response is successful update the course\r\n    if (response.status === 204) {\r\n      return [];\r\n    }\r\n\r\n    // If the response is unsuccessful return a bad request response\r\n    else if (response.status === 400) {\r\n      return response.json().then(data => {\r\n        return data.errors;\r\n      });\r\n    }\r\n\r\n    else {\r\n      throw new Error();\r\n    };\r\n  };\r\n\r\n  // Method that generates a DELETE request\r\n  async deleteCourse(emailAddress, password, id) {\r\n    const response = await this.api(`/courses/${id}`, 'DELETE', null, true, { emailAddress, password });\r\n\r\n    // If the response is successful delete the course\r\n    if (response.status === 204) {\r\n      return [];\r\n    }\r\n\r\n    // If the response is unsuccessful return a bad request response\r\n    else if (response.status === 400) {\r\n      return response.json().then(data => {\r\n        return data.errors;\r\n      });\r\n    }\r\n\r\n    else {\r\n      throw new Error();\r\n    }\r\n  };\r\n};\r\n\r\n\r\n","// Import statements\r\nimport React, { Component } from 'react';\r\nimport Data from './Data';\r\nimport Cookies from 'js-cookie';\r\n\r\n// Create the context\r\nconst Context = React.createContext(); \r\n\r\nexport class Provider extends Component {\r\n\r\n  // Our authenticatedUser is defined if the cookie was set.\r\n  state = {\r\n    authenticatedUser: Cookies.getJSON('authenticatedUser') || null\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.data = new Data();\r\n  };\r\n\r\n  render() {\r\n\r\n    // Destructuring the authenticatedUser state\r\n    const { authenticatedUser } = this.state;\r\n\r\n    // Create the value of our context\r\n    const value = {\r\n      authenticatedUser,\r\n      data: this.data,\r\n      actions: {\r\n        signIn: this.signIn,\r\n        signOut: this.signOut\r\n      }\r\n    };\r\n\r\n    return (\r\n      // Put the Provider on the top of the tree components\r\n      <Context.Provider value={value}>\r\n        {this.props.children}\r\n      </Context.Provider>  \r\n    );\r\n  };\r\n\r\n  // Method that signIn the user with their corresponding credentials\r\n  signIn = async (emailAddress, password) => {\r\n    const user = await this.data.getUser(emailAddress, password);\r\n    if (user !== null) {\r\n      this.setState(() => {\r\n        user.password = password;\r\n        user.emailAddress = emailAddress;\r\n        return {\r\n          authenticatedUser: user\r\n        };\r\n      });\r\n      Cookies.set('authenticatedUser', JSON.stringify(user), { expires: 1 });\r\n    };\r\n\r\n    return user;\r\n  };\r\n\r\n  // Method that signOut the user eliminating our cookie and the authenticatedUser value\r\n  signOut = () => {\r\n    this.setState(() => {\r\n      return {\r\n        authenticatedUser: null,\r\n      };\r\n    });\r\n    \r\n    Cookies.remove('authenticatedUser');\r\n  };\r\n};\r\n\r\nexport const Consumer = Context.Consumer;\r\n\r\n/**\r\n * A higher-order component that wraps the provided component in a Context Consumer component.\r\n * @param {class} Component - A React component.\r\n * @returns {function} A higher-order component.\r\n */\r\n\r\nexport default function withContext(Component) {\r\n  return function ContextComponent(props) {\r\n    return (\r\n      <Context.Consumer>\r\n        {context => <Component {...props} context={context} />}\r\n      </Context.Consumer>\r\n    );\r\n  };\r\n};","// Import statements\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { Consumer } from './Context';\n\n// Stateless component that generates a private route\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Consumer>\n      { context => (\n        <Route\n          {...rest}\n          render={rest => context.authenticatedUser ? (\n              <Component {...rest} />\n            ) : (\n              <Redirect to={{\n                pathname: '/signin',\n                state: { from: rest.location }\n              }} />\n            )\n          }\n        />\n      )}\n    </Consumer>\n  );\n};\n\nexport default PrivateRoute;","// Import statements\r\nimport React from 'react';\r\n\r\n// Stateless Component that render /notfound page\r\nconst NotFound = () => (\r\n\r\n    <main>\r\n        <div className=\"wrap\">\r\n            <h2>Not Found</h2>\r\n            <p>Sorry! We couldn't find the page you're looking for.</p>\r\n        </div>\r\n    </main>\r\n\r\n);\r\n\r\nexport default NotFound;","// Import statements\r\nimport React from 'react';\r\n\r\n// Stateless Component that render the \"forbidden\" page\r\nconst Forbidden = () => (\r\n\r\n    <main>\r\n        <div className=\"wrap\">\r\n            <h2>Forbidden</h2>\r\n            <p>Oh oh! You can't access this page.</p>\r\n        </div>\r\n    </main>\r\n\r\n);\r\n\r\nexport default Forbidden;","// Import statements\r\nimport React from 'react';\r\n\r\n// Stateless Component that render \"/unhandledError\" page\r\nconst UnhandledError = () => (\r\n\r\n    <main>\r\n        <div className=\"wrap\">\r\n            <h2>Error</h2>\r\n            <p>Sorry! We just encountered an unexpected error.</p>\r\n        </div>\r\n    </main>\r\n    \r\n);\r\n\r\nexport default UnhandledError;","// Import statements\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\n\n// Import main components\nimport Courses from './components/Courses';\nimport CourseDetail from './components/CourseDetail';\nimport Header from './components/Header';\nimport UserSignIn from './components/UserSignIn';\nimport UserSignUp from './components/UserSignUp';\nimport CreateCourse from './components/CreateCourse';\nimport UpdateCourse from './components/UpdateCourse';\nimport UserSignOut from './components/UserSignOut';\n\n// Import the HOC function\nimport withContext from './Context';\n\n// Import Private Route\nimport PrivateRoute from './PrivateRoute';\n\n// Import Error components\nimport NotFound from './components/NotFound';\nimport Forbidden from './components/Forbidden';\nimport UnhandledError from './components/UnhandledError';\n\n// Passing context to all components\nconst UserSignUpWithContext = withContext(UserSignUp);\nconst UserSignInWithContext = withContext(UserSignIn);\nconst HeaderWithContext = withContext(Header);\nconst UserSignOutWithContext = withContext(UserSignOut);\nconst CreateCourseWithContext = withContext(CreateCourse);\nconst CoursesWithContext = withContext(Courses);\nconst CourseDetailWithContext = withContext(CourseDetail);\nconst UpdateCourseWithContext = withContext(UpdateCourse);\n\nconst App = () => (\n  <Router>\n    <div>\n      <HeaderWithContext /> {/** Header component that render according if the user is authenticated or not*/}\n\n      {/** All the routes rendered with context */}\n      <Switch>\n        <Route exact path=\"/\" component={CoursesWithContext} />\n        <PrivateRoute exact path=\"/courses/create\" component={CreateCourseWithContext} />\n        <Route exact path=\"/courses/:id\" component={CourseDetailWithContext} />\n        <Route exact path=\"/signin\" component={UserSignInWithContext} />\n        <Route exact path=\"/signup\" component={UserSignUpWithContext} />\n        <Route exact path=\"/signout\" component={UserSignOutWithContext} />\n        <PrivateRoute exact path=\"/courses/:id/update\" component={UpdateCourseWithContext} />\n        <Route exact path=\"/notfound\" component={NotFound} />\n        <Route exact path=\"/forbidden\" component={Forbidden} />\n        <Route exact path=\"/error\" component={UnhandledError} />\n\n        {/** If any route match, \"NotFound\" component will render */}\n        <Route component={NotFound} />\n        \n      </Switch>\n\n    </div>\n  </Router>\n)\n\nexport default App;\n\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Import statements\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Import Provider context\nimport { Provider } from './Context';\n\n// Import css styles\nimport './styles/global.css';\n\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}